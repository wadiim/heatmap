#!/bin/bash

# A heatmap generator for sixel-capable terminals.
# It reads integers from stdin and generates a heatmap using sixel
# graphics, where each cell's color represents a corresponding
# input value.

# DEFAULTS

# Color lookup table (values are in sixel format):
declare -ga colors=(
        [0]="18;20;23"
        [1]="6;28;16"
        [2]="0;43;20"
        [3]="15;65;26"
        [4]="22;83;33"
)
declare -gi cell_size=16  # Cell size in pixels.
declare -gi margin_size=4 # Margin size in pixels.
declare -gi max_cols=32   # Max number of columns.
declare -gi compress=0    # A flag that specify whether or not
                          # to compress the output data. A value
			  # of 0 indicates that the data should be
			  # compressed, and any other value
			  # indicates that it should not.

# GLOBALS

declare -ga input               # Input values.
declare -gi min max             # Min/max input values.
declare -ga cells               # Color codes of individual cells.
declare -ga pixmap              # Color codes of individual pixels.
                                # Values of -1 represents background color.
declare -gi width height        # Width end height of the output heatmap in
declare -gi num_of_cols         # Number of columns of the output
				# heatmap.
declare -gi num_of_rows         # Number of rows of the output
				# heatmap.

                                # pixels.
declare -g  heatmap             # Sixel sequence defining the heatmap.
declare -gA binary_to_sixel_map # Mapping from binary numbers (stored as
                                # strings) to sixel characters. Needed for
				# performance reasons.
declare -ga base_pixmap_idxs    # A pixmap indexes corresponding
				# to the first cell.

# Divide $1 by $2 and round the result to the nearest integer.
ndiv() {
	echo "$((($1 + ($2 / 2)) / $2))"
}

# Divide $1 by $2 and round the result up.
udiv() {
	echo "$((($1 + ($2 - 1)) / $2))"
}

########################################
# Find min and max input values.
# Globals:
#	input, min, max
# Arguments:
#	None
########################################
find_min_max() {
        for val in "${input[@]}"; do
                # Remove non-integer values.
                if [[ ! $val =~ ^-?[0-9]+$ ]]; then
                        input=("${input[@]/$val/}")
                        continue
                fi

                [[ ! -v min ]] || ((val < min)) && min=$val
                [[ ! -v max ]] || ((val > max)) && max=$val
        done
}

########################################
# Map a value to a color code.
# Globals:
#	colors, min, max
# Arguments:
#	Value to map.
# Outputs:
#	A color code corresponding to the given value.
########################################
map_value_to_color_code() {
	if ((min == max)); then
		echo "0"
	else
		echo "$(ndiv $((($1 - min) * (${#colors[@]} - 1))) $((max - min)))"
	fi
}

########################################
# Map input values to color codes.
# Globals:
#	input, cells
# Arguments:
#	None
########################################
map_input_to_cells() {
        for val in "${input[@]}"; do
                [[ $val == "" ]] && continue
		cells+=($(map_value_to_color_code $val))
        done
}

########################################
# Calculate the heatmap dimensions.
# Globals:
#	num_of_cols, num_rows, width, height
# Arguments:
#	None
########################################
calculate_dimensions() {
        if ((${#cells[@]} < max_cols)); then
                num_of_cols="${#cells[@]}"
        else
                num_of_cols="$max_cols"
        fi
        num_of_rows=$(udiv ${#cells[@]} $num_of_cols)

        width="$((cell_size * num_of_cols + margin_size * (num_of_cols - 1)))"
        height="$((cell_size * num_of_rows + margin_size * (num_of_rows - 1)))"
}

########################################
# Initialize the base_pixmap_idxs global variable.
# Globals:
#	base_pixmap_idxs, cell_size, width
# Arguments:
#	None
########################################
init_base_pixmap_idxs() {
	local idx=0
	for i in $(seq 0 $((cell_size*cell_size - 1))); do
		base_pixmap_idxs+=($idx)
		((idx+=1))
		if (((i+1) % cell_size == 0)); then
			idx=$(((idx - cell_size) + width))
		fi
	done
}

########################################
# Repeat the given character specified number of times.
# Arguments:
#	A character to repeat, number of repeats.
########################################
repeat_char() {
	local ret="$1"
	for ((i=0; i<($2 - 1); i+=1)); do
		ret+=" $1"
	done
	echo "$ret"
}

########################################
# Convert cells to pixmap.
# Globals:
#	cells, pixmap, width, height, cell_size, margin_size, max_cols
# Arguments:
#	None
########################################
generate_pixmap() {
	local pixmap_idx=0
	pixmap=( $(repeat_char '-1' $((width*height))) )
	for cell_idx in "${!cells[@]}"; do
		for i in "${base_pixmap_idxs[@]}"; do
			pixmap[$((pixmap_idx + i))]="$((${cells[$cell_idx]}))"
		done
		((pixmap_idx += cell_size))
		if ((pixmap_idx % width == 0)); then
			((pixmap_idx += (cell_size + margin_size - 1)*width))
		else
			((pixmap_idx += margin_size))
		fi
	done

        # Add bottom padding if necessary to make the pixmap height a multiple
        # of 6.
        while ((height % 6 != 0)); do
                for i in $(seq 0 $((width - 1))); do
                        pixmap+=("-1")
                done
                height=$((height += 1))
        done
}

########################################
# Convert a binary number to an ascii character.
# Arguments:
#	A binary number as string.
# Outputs:
#	The corresponding ascii character.
########################################
binary_to_ascii() {
	echo "$(printf "\x$(printf '%x' $1)")"
}

########################################
# Initialize the binary_to_sixel_map array with all possible 6-digit binary
# numbers and the corresponding sixel characters.
# Globals:
#	binary_to_sixel_map
# Arguments:
#	None
########################################
init_binary_to_sixel_map() {
	for bin in {0..1}{0..1}{0..1}{0..1}{0..1}{0..1}; do
		binary_to_sixel_map["$bin"]="$(binary_to_ascii $((2#$bin + 2#111111)))"
	done
}

########################################
# Convert the pixmap to a sixel sequence defining the heatmap.
# Globals:
#	pixmap, heatmap, colors, width
# Arguments:
#	None
########################################
pixmap_to_sixel() {
	heatmap+='Pq' # Enter sixel mode.

	# Define color palette
	for color_idx in "${!colors[@]}"; do
		heatmap+="#$color_idx;2;${colors[$color_idx]}"
	done

	local pixel_idxs=($(seq 0 $width $((5*width))))
	local last_idx=$((pixel_idx[0] + (width - 1)))
	local color_idx=0
	local binary

	heatmap+="#$color_idx"

	while ((pixel_idxs[0] < ${#pixmap[@]})); do
		binary=""

		# Convert six pixmap values to a sixel character.
		for idx in "${pixel_idxs[@]}"; do
			binary="$((pixmap[idx] == color_idx))$binary"
		done

		heatmap+="${binary_to_sixel_map[$binary]}"

		if ((pixel_idxs[0] > 0)) &&
		   ((pixel_idxs[0] == last_idx)); then
			if ((color_idx == ${#colors[@]} - 1)); then
				# Move to the next line.

				((pixel_idxs[0] += 5*width + 1))
				for i in $(seq 1 $((${#pixel_idxs[@]} - 1))); do
					((pixel_idxs[i] = pixel_idxs[i-1] + width))
				done
				((last_idx = pixel_idxs[0] + (width - 1)))
				color_idx=0
				heatmap+="#$color_idx\$-"
			else
				# Move to the beginning of the
				# current line.

				for i in "${!pixel_idxs[@]}"; do
					((pixel_idxs[i] -= (width - 1)))
				done
				((color_idx += 1))
				heatmap+="#$color_idx\$"
			fi
		else
			# Move to the next column.

			for i in ${!pixel_idxs[@]}; do
				((pixel_idxs[i] += 1))
			done
		fi
	done

	heatmap+='\' # Leave sixel mode.
}

########################################
# Compress the output sixel sequence.
# Globals:
#	heatmap, width
# Arguments:
#	None
########################################
compress_output() {
	for i in $(seq $width -1 2); do
		heatmap="$(echo "$heatmap" | sed -r 's/([@A-Za-z~^_`])\1{'$i'}/!'$((i+1))'\1/g')"
		for s in '?' '[' '\' ']' '{' '|' '}'; do
			heatmap="$(echo "$heatmap" | sed -r 's/(\'$s')\'$s'{'$i'}/!'$((i+1))'\'$s'/g')"
		done
	done
	heatmap="$(echo "$heatmap" | sed -r 's/![0-9]+\?(#[0-9]+\$)/\1/g')"
}

show_help() {
	cat << EOF
Usage: $0 [-c NUM] [-m NUM] [-w NUM] [-o] [-h]

-c NUM
	Set the size of each cell to NUM pixels.
-m NUM
	Set the size of gaps between cells to NUM pixels.
-w NUM
	Set the maximal number of columns to NUM.
-o
	Enable the output data compression.
-h
	Show help message and exit.
EOF
}

########################################
# Parse command-line arguments.
# Globals:
#	cell_size, margin_size, max_cols, compress
# Arguments:
#	@
########################################
parse_args() {
	while getopts "c:m:w:oh" opt; do
		case "$opt" in
			c)
				cell_size=$((OPTARG))
				;;
			m)
				margin_size=$((OPTARG))
				;;
			w)
				max_cols=$((OPTARG))
				;;
			o)
				compress=1
				;;
			h)
				show_help
				exit 0
				;;
		esac
	done
}

main() {
	parse_args "$@"
        input=($(cat -))
	((${#input[@]} <= 0)) && exit 0
        find_min_max
        map_input_to_cells
	calculate_dimensions
	init_base_pixmap_idxs
        generate_pixmap
	init_binary_to_sixel_map
	pixmap_to_sixel
	if ((compress != 0)); then
		compress_output
	fi
	echo -ne "$heatmap"
}

main "$@"
